{"ast":null,"code":"import { START_LOADING, END_LOADING, FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE, COMMENT } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: {\n        post: data\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    }); // tại vì chỉ lấy cái comment trong models dưới server\n\n    return data.comments;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/the/code/cp/client/src/actions/posts.js"],"names":["START_LOADING","END_LOADING","FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE","COMMENT","api","getPost","id","dispatch","type","data","fetchPost","payload","post","error","console","log","getPosts","page","currentPage","numberOfPages","fetchPosts","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","history","push","_id","updatePost","likePost","user","JSON","parse","localStorage","getItem","token","commentPost","value","comment","comments","deletePost"],"mappings":"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","sourcesContent":["import {\n    START_LOADING,\n    END_LOADING,\n    FETCH_ALL,\n    FETCH_POST,\n    FETCH_BY_SEARCH,\n    CREATE,\n    UPDATE,\n    DELETE,\n    LIKE,\n    COMMENT,\n} from '../constants/actionTypes'\nimport * as api from '../api/index.js'\n\nexport const getPost = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n\n        const { data } = await api.fetchPost(id)\n\n        dispatch({ type: FETCH_POST, payload: { post: data } })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const getPosts = (page) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n        const {\n            data: { data, currentPage, numberOfPages },\n        } = await api.fetchPosts(page)\n\n        dispatch({\n            type: FETCH_ALL,\n            payload: { data, currentPage, numberOfPages },\n        })\n        dispatch({ type: END_LOADING })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n        const {\n            data: { data },\n        } = await api.fetchPostsBySearch(searchQuery)\n\n        dispatch({ type: FETCH_BY_SEARCH, payload: { data } })\n        dispatch({ type: END_LOADING })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const createPost = (post, history) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n        const { data } = await api.createPost(post)\n\n        dispatch({ type: CREATE, payload: data })\n\n        history.push(`/posts/${data._id}`)\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        const { data } = await api.updatePost(id, post)\n\n        dispatch({ type: UPDATE, payload: data })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    const user = JSON.parse(localStorage.getItem('profile'))\n\n    try {\n        const { data } = await api.likePost(id, user?.token)\n\n        dispatch({ type: LIKE, payload: data })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const commentPost = (value, id) => async (dispatch) => {\n    try {\n        const { data } = await api.comment(value, id)\n\n        dispatch({ type: COMMENT, payload: data })\n\n        // tại vì chỉ lấy cái comment trong models dưới server\n        return data.comments\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await await api.deletePost(id)\n\n        dispatch({ type: DELETE, payload: id })\n    } catch (error) {\n        console.log(error)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}